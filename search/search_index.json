{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Easy Meets!","text":"<p>Welcome to EasyMeets! This is  documentation for easy-meets, This readme explains several aspects of the code base for easy-meets, and makes it easier for  new developers to get started with the project.</p> <p>Note</p> <p>We are currently in the process of migrating our documentation to MkDocs.</p>"},{"location":"#getting-started","title":"Getting Started","text":"Tip <p>This project can also be found on our Github Pages and Github Repo</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js</li> <li>Expo CLI</li> <li>Windows, macOS, or Linux</li> <li>Android Studio (for Android development)</li> <li>Xcode (for iOS development)</li> <li>Expo client (for running the app on a physical device)</li> <li>Expo Go (for running the app on an emulator)</li> <li>Git</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Info</p> <p>If you have any trouble setting up the project, send an email to easymeetsnyc@gmail.com and we can help you out! </p> <ul> <li>Clone the project repository from the source control system (e.g. GitHub) to the new machine. You can do this by running the following command in the terminal:</li> </ul> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> <p>Replace <code>&lt;repository-url&gt;</code> with the URL of the repository.</p> <p>Note</p> <p>It is recommended to use SSH to clone the repository. You can find the SSH URL by clicking on the green \"Code\" button on the repository page.   Please refer to this gist for assistance with setting up SSH keys: SSH GIST</p> <ul> <li>Navigate to the project directory by running the following command in the terminal:</li> </ul> <pre><code>cd &lt;project-directory&gt;\n</code></pre> <p>Replace <code>&lt;project-directory&gt;</code> with the name of the project directory.</p> <ul> <li>Install the required dependencies by running the following command in the terminal:</li> </ul> <pre><code>npm install yarn --global\nyarn install\n</code></pre> <p>This will install all the dependencies listed in the <code>package.json</code> file. (Will take a decent time to download)</p> <ul> <li>Ensure that the new machine has the required environment setup. This project requires Node.js and Expo CLI to be installed. You can download and install Node.js from the official website (https://nodejs.org/en/download/) and install Expo CLI by running the following command in the terminal:</li> </ul> <pre><code>yarn global add expo-cli\n</code></pre> <ul> <li>Run the project using the following command in the terminal:</li> </ul> <pre><code>yarn start\n</code></pre> <p>This will start the development server and open the Expo client in your default web browser. You can then use the Expo client to run the app on a physical device or emulator.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>Frontend: React-Native, React-Paper, TailwindCSS</p> <p>Backend: Supabase</p> <p>Deployment: Vercel, Android App Store, IOS app store</p> <p>Link to MkDocs Docs</p>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#how-do-i-add-a-new-page-to-the-documentation","title":"How do I add a new page to the documentation?","text":"<ol> <li> <p>Create a new Markdown file: In the easy meets repo, create a new Markdown file in the <code>docs</code> directory. This file will represent your new page. For example, you might create a file called <code>new_page.md</code>.</p> </li> <li> <p>Write your content: Open the new Markdown file and write your content. You can use any standard Markdown syntax.</p> </li> <li> <p>Update the navigation: To make your new page accessible, you need to add it to the navigation structure. This is done in the <code>mkdocs.yml</code> file, which is located in the root of your project. Open this file and look for the <code>nav</code> or <code>pages</code> section (depending on your MkDocs version). Add a new entry for your page. For example:</p> </li> </ol> <pre><code>nav:\n- 'Home': 'index.md'\n- 'New Page': 'new_page.md'\n</code></pre>"},{"location":"#i-am-running-into-the-supabaseurl-not-defined-error-how-do-i-fix-this","title":"I am running into the \"SupabaseURL not defined\" error. How do I fix this?","text":"<p>This error occurs when the SupabaseURL is not defined in the environment variables. Contact easymeetsnyc@gmail.com for the SupabaseURL environment variable or file.</p>"},{"location":"components/","title":"Components","text":""},{"location":"components/#locationcard","title":"LocationCard","text":"<p>The <code>LocationCard</code> component is a React Native component that displays information about a location in a card format. The data for the card is currently hardcoded as <code>fakeData</code>, but the comment indicates that this will eventually be replaced with real data from the Google API.</p> <p>Here's a breakdown of what the component does:</p> <ul> <li>The <code>Card.Cover</code> component displays an image from the <code>photo</code> property of <code>fakeData</code>.</li> <li>The <code>Card.Title</code> component displays the <code>name</code> and <code>formatted_address</code> of the location. It also includes an avatar icon on the left and a heart icon button on the right.</li> <li>The <code>Card.Content</code> component contains several <code>Chip</code> components that display various pieces of information about the location:</li> <li>The first <code>Chip</code> displays the <code>rating</code> of the location.</li> <li>The second <code>Chip</code> indicates whether the location is currently open.</li> <li>The third <code>Chip</code> displays the <code>formatted_phone_number</code> of the location.</li> <li>The fourth <code>Chip</code> displays the <code>website</code> of the location.</li> <li>The fifth <code>Chip</code> displays the <code>types</code> of the location.</li> <li>The commented out <code>View</code> component was intended to display the <code>price_level</code> of the location as a series of dollar sign icons.</li> </ul> <p>The <code>styles</code> object contains several styles that are applied to the components in the card. For example, <code>styles.cover_size</code> is applied to the <code>Card.Cover</code> component to set its height, and <code>styles.title_font</code> is applied to the <code>Card.Title</code> component to set the font size and weight of the title</p>"},{"location":"components/#swipingcards","title":"SwipingCards","text":"<p>The <code>SwipingCards</code> component is a React Native component that displays a stack of cards (using the <code>Swiper</code> component from <code>react-native-deck-swiper</code>) which can be swiped left or right. Each card is represented by the <code>LocationCard</code> component.</p> <p>Here's a breakdown of what the component does:</p> <ul> <li> <p>It initializes a state variable <code>cards</code> with a list of fake data. This state will hold the data for each card.</p> </li> <li> <p>It defines two functions <code>showLikedToast</code> and <code>showSkippedToast</code> that display a toast message when a card is swiped right (liked) or left (skipped), respectively.</p> </li> <li> <p>It defines two functions <code>onSwipedLeft</code> and <code>onSwipedRight</code> that are called when a card is swiped left or right, respectively. These functions call the appropriate toast function and log the type of swipe.</p> </li> <li> <p>In the return statement, it renders a <code>Swiper</code> component with the following props:</p> </li> <li><code>cards</code>: the data for each card.</li> <li><code>renderCard</code>: a function that takes a card's data and returns a <code>LocationCard</code> component.</li> <li><code>onSwipedLeft</code> and <code>onSwipedRight</code>: functions to be called when a card is swiped left or right.</li> <li><code>onSwipedAll</code>: a function to be called when all cards have been swiped.</li> <li><code>cardIndex</code>: the index of the card to be displayed first.</li> <li><code>backgroundColor</code>: the background color of the swiper.</li> <li> <p><code>stackSize</code>: the number of cards to be displayed in the stack.</p> </li> <li> <p>It also defines a <code>styles</code> object that contains styles for the container and the cards.</p> </li> </ul> <p>In summary, this component displays a stack of cards that can be swiped left or right, and it shows a toast message depending on the direction of the swipe.</p>"},{"location":"components/#searchbarstatic","title":"SearchBarStatic","text":"<p>The <code>SearchComponent</code> maintains two pieces of state: <code>searchQuery</code> and <code>results</code>. <code>searchQuery</code> is the current text in the search bar, and <code>results</code> is an array of search results.</p> <p>The <code>onChangeSearch</code> function is called whenever the text in the search bar changes. It updates <code>searchQuery</code> with the new text. If the new text is an empty string, it clears the search results. Otherwise, it filters the <code>places</code> array to include only places that contain the new text, takes the first 5 results, and sets <code>results</code> to these new results.</p> <p>The <code>SearchComponent</code> renders a <code>Searchbar</code> and a list of search results. The <code>Searchbar</code>'s <code>onChangeText</code> prop is set to <code>onChangeSearch</code>, so <code>onChangeSearch</code> is called whenever the text in the search bar changes. The <code>value</code> prop is set to <code>searchQuery</code>, so the text in the search bar reflects the current search query.</p> <p>The search results are rendered as <code>List.Item</code> components. Each <code>List.Item</code> displays a search result and logs the result to the console when pressed.</p>"},{"location":"filestructure/","title":"Project Overview","text":""},{"location":"filestructure/#file-structure","title":"File Structure","text":"<p>The file structure for the project is as follows for our react native app:</p> <pre><code>easy-meets\n\u251c\u2500\u2500 .expo-shared\n\u251c\u2500\u2500 .github\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 lib\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 screens\n\u251c\u2500\u2500 styles\n\u251c\u2500\u2500 tests\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 app.json\n\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 jest.config.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n</code></pre>"},{"location":"filestructure/#naming-conventions-and-style","title":"Naming Conventions and Style","text":"<p>We use the following naming conventions and style to make it easier for developers to read and understand the code.</p>"},{"location":"filestructure/#naming-conventions","title":"Naming Conventions","text":""},{"location":"filestructure/#components","title":"Components","text":"<p>Components have the following naming convention:     - Functional Components: <code>ComponentName.js</code>     - Class Components: <code>ClassName.js</code></p> <p>Tip</p> <p>Functional components are preferred over class components. Please use functional components unless you have a good reason to use a class component.</p>"},{"location":"filestructure/#files","title":"Files","text":"<p>Files have the following naming convention based on their type:     - Components: <code>ComponentName.js</code>     - Classes: <code>ClassName.js</code>     - Functions: <code>functionName.js</code>     - Variables: <code>variableName.js</code>     - Styles: <code>styleName.js</code>     - Tests: <code>testName.js</code></p> <p>Tip</p> <p>Components and Classes do not have camel case, while Functions, Variables, Styles, and Tests do. Please follow this convention when creating new files.</p>"},{"location":"filestructure/#style","title":"Style","text":"<p>Easy meets uses the React Native Paper library for styling.     The documentation for this library can be found here.</p> <p>Tip</p> <p>Please use the React Native Paper library for styling components.</p> <p>Danger</p> <p>Do not use inline styling or other libraries. This will make it harder for other developers to read your code.</p>"},{"location":"filestructure/#links","title":"Links","text":"<ul> <li>React Native Paper</li> <li>Figma.</li> </ul>"},{"location":"googleapi/","title":"Google-APi","text":""},{"location":"googleapi/#overview","title":"Overview","text":"<p>The <code>google-api</code> directory contains functions for fetching data from the Google Places API. The functions are defined in <code>googleapi.js</code>, and they can be imported into other files using the following import statement:</p> <pre><code>import { getNearbyPlaces } from '../google-api/google-api';\n</code></pre>"},{"location":"googleapi/#functions","title":"Functions","text":"<ol> <li><code>getNearbyPlaces(location, radius, type)</code>: This function fetches places near a specific location within a certain radius. The type of places to fetch can be specified (e.g., restaurant, cafe, etc.). It returns an array of places.</li> </ol> <p>Example usage: <pre><code>async function fetchNearbyPlaces() {\ntry {\nconst places = await getNearbyPlaces('37.4226711,-122.0849872', 1000, 'restaurant');\nconsole.log(places);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchNearbyPlaces();\n</code></pre></p> <ol> <li><code>getGooglePhotoUrl(photoReference, maxWidth)</code>: This function generates a URL for a Google Places photo. The <code>photoReference</code> is a unique identifier for the photo, and <code>maxWidth</code> specifies the maximum width of the photo.</li> </ol> <p>Example usage: <pre><code>const photoUrl = getGooglePhotoUrl('CmRaAAAA...', 400);\nconsole.log(photoUrl);  // Outputs the URL of the photo\n</code></pre></p> <ol> <li><code>getDetails(placeId)</code>: This function fetches detailed information about a place specified by its <code>placeId</code>. It returns an object containing the place's details.</li> </ol> <p>Example usage: <pre><code>async function fetchPlaceDetails() {\ntry {\nconst details = await getDetails('ChIJN1t_tDeuEmsRUsoyG83frY4');\nconsole.log(details);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchPlaceDetails();\n</code></pre></p> <ol> <li><code>getGeocode(address)</code>: This function converts an address into geographic coordinates (latitude and longitude). It returns an array of results, each containing the geographic coordinates and other information about a location.</li> </ol> <p>Example usage: <pre><code>async function fetchGeocode() {\ntry {\nconst results = await getGeocode('1600 Amphitheatre Parkway, Mountain View, CA');\nconsole.log(results);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchGeocode();\n</code></pre></p> <ol> <li><code>getPlaceFromText(input)</code>: This function fetches places that match a text query. It returns an array of places.</li> </ol> <p>Example usage: <pre><code>async function fetchPlacesFromText() {\ntry {\nconst places = await getPlaceFromText('coffee in Sydney');\nconsole.log(places);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchPlacesFromText();\n</code></pre></p> <ol> <li><code>parseCardData(location, radius, type)</code>: This function fetches nearby places and formats the data for display in a card. It returns an array of objects, each representing a card.</li> </ol> <p>Example usage: <pre><code>async function fetchCardData() {\ntry {\nconst cards = await parseCardData('37.4226711,-122.0849872', 1000, 'restaurant');\nconsole.log(cards);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchCardData();\n</code></pre></p> <ol> <li><code>parseCardDataTextSearch(input)</code>: This function fetches places that match a text query and formats the data for display in a card. It returns an array of objects, each representing a card.</li> </ol> <p>Example usage: <pre><code>async function fetchCardDataFromText() {\ntry {\nconst cards = await parseCardDataTextSearch('coffee in Sydney');\nconsole.log(cards);\n} catch (error) {\nconsole.error(error);\n}\n}\nfetchCardDataFromText();\n</code></pre></p>"},{"location":"screens/","title":"Screens","text":""},{"location":"screens/#overview","title":"Overview","text":"<p>The <code>screens</code> directory contains the React Native screens for the application. Each screen is a React component that is rendered by the <code>NavigationContainer</code> component in <code>App.js</code>. The screens are organized into subdirectories based on the navigation stack they belong to. For example, the <code>ExploreScreen</code> component is located in <code>screens/ExploreScreen.js</code>.</p>"},{"location":"screens/#explorescreen","title":"ExploreScreen","text":"<p>The <code>ExploreScreen</code> component in this React Native application provides a user interface for exploring locations. It has three main states: \"location\", \"search\", and \"settings\". In the \"location\" state, users can view a map with a draggable marker, input an address to update the marker's location, and search for places within a specified radius from the marker. The search results are displayed as swipeable cards. In the \"search\" state, users can enter a search query to find places, and the results are also displayed as swipeable cards. In the \"settings\" state, users can adjust the type of places to search for. The component uses several hooks to manage state, including the current page state, the search query, the marker's location, the search radius, and the search type. It also uses the <code>getGeocode</code> function to convert an address to geographic coordinates, and the <code>parseCardData</code> and <code>parseCardDataTextSearch</code> functions to fetch places data from the Google Places API.</p>"},{"location":"supabase/","title":"Supabase","text":""},{"location":"supabase/#supabase-overview","title":"Supabase Overview","text":"<p>The <code>SupabaseProvider</code> component in /lib/context is a context provider for the Supabase client, authentication, and database functions. It uses the React Context API to provide these functionalities to all components inside of the application.</p> <p>The way <code>SupbaseProvider</code> works, is that it creates a context object that contains the Supabase client and authentication functions. It then wraps the application in a <code>SupabaseContext.Provider</code> component, which provides the context object to all components in the application. This allows all components to access the Supabase client and authentication functions using the <code>useContext</code> hook.</p> App.js<pre><code>export default function App() {\nreturn (\n&lt;SupabaseProvider&gt;\n&lt;PaperProvider&gt;\n&lt;GlobalNav&gt;&lt;/GlobalNav&gt;\n&lt;/PaperProvider&gt;\n&lt;/SupabaseProvider&gt;\n);\n}\n</code></pre>"},{"location":"supabase/#example-usage","title":"Example Usage","text":"<p>An an example, lets say we had a component called <code>YourComponent</code>, it can now access the Supabase client and authentication functions using our custom hook in '/lib/hooks/useSupabase.js'.</p> YourComponent.js<pre><code>import React, { useContext } from 'react';\nimport useSupabase from './lib/hooks/useSupabase'; // This route is not correct, but you get the idea\nfunction YourComponent() {\nconst { isLoggedIn, login, register, forgotPassword, logout } = useSupabase();\n// You can now use isLoggedIn, login, register, forgotPassword, and logout in your component\nreturn &lt;div&gt;Your component&lt;/div&gt;;\n}\nexport default YourComponent;\n</code></pre>"},{"location":"supabase/#adding-new-functions-to-supabaseprovider","title":"Adding new functions to SupabaseProvider","text":"<p>To add a new function to <code>SupabaseProvider</code>, you need to define it in the <code>SupabaseProvider</code> component and add it to the value of the <code>SupabaseContext.Provider</code> component. Here's an example of how you can add a function that gets the current user:</p> SupabaseProvider.js<pre><code>// In SupabaseProvider.js\n// Define the getCurrentUser function\nconst getCurrentUser = async () =&gt; {\nconst { data: { user } } = await supabase.auth.getUser()\nreturn user;\n};\n// Add getCurrentUser to the value of the SupabaseContext.Provider component\nreturn (\n&lt;SupabaseContext.Provider\nvalue={{ isLoggedIn, login, register, forgotPassword, logout, getCurrentUser }}\n&gt;\n{isNavigationReady ? props.children : null}\n&lt;/SupabaseContext.Provider&gt;\n);\n</code></pre> <p>In SubabaseContext.js, you need to add the <code>getCurrentUser</code> function to the <code>SupabaseContext</code> object:</p> SupabaseContext.js<pre><code>// In SupabaseContext.js\nimport { createContext } from 'react';\nconst SupabaseContext = createContext({\nisLoggedIn: false,\nlogin: async () =&gt; {},\nregister: async () =&gt; {},\nforgotPassword: async () =&gt; {},\nlogout: async () =&gt; {},\ngetCurrentUser: async () =&gt; {}, // Add getCurrentUser to the SupabaseContext object\n});\nexport default SupabaseContext;\n</code></pre> <p>You can now use the <code>getCurrentUser</code> function in your components in the same way as the other functions using the <code>use Supabase</code> hook:</p> YourComponent.js<pre><code>import React, { useContext } from 'react';\nimport useSupabase from './lib/hooks/useSupabase'; // This route is not correct, but you get the idea\nfunction YourComponent() {\nconst { getCurrentUser } = useSupabase();\n// You can now use getCurrentUser in your component\ngetCurrentUser().then((user) =&gt; console.log(user));\nreturn &lt;div&gt;Your component&lt;/div&gt;;\n}\n</code></pre> <p>In this example, <code>YourComponent</code> calls the <code>getCurrentUser</code> function when it mounts and logs the current user to the console.</p> <p>Question</p> <p>Why is using a hook better than using the context object directly?</p> <p>Answer</p> <p>Using a hook is better because it allows you to use the function in a functional component. If you use the context object directly, you can only use the function in a class component. Also, using a hook is easier to read and understand. It is also easier to test. useSupabase has clearer semantics than useContext(SupabaseContext). (useSupabase is a custom hook that uses the useContext hook under the hood)</p>"},{"location":"supabase/#supabase-functions","title":"Supabase Functions","text":"<p>Question</p> <p>How can i find out more about Supabase functions?</p> <p>Answer</p> <p>You can find out more about Supabase functions by reading the documentation. Here are some links to the documentation:</p> <ul> <li>Supabase Auth</li> <li>Supabase Database</li> <li>Supabase Storage</li> <li>Supabase Realtime</li> </ul> <p>Info</p> <p>Please use version 2.0.0 of the Supabase client. Version 1.0.0 is deprecated and we are not using it.</p>"}]}